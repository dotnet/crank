counters:
  # creates measurements from dotnet counters
- provider: System.Runtime
  values: 
  - name: cpu-usage
    measurement: runtime-counter/cpu-usage
    description: Amount of time the process has utilized the CPU (ms)

  - name: working-set
    measurement: runtime-counter/working-set
    description: Amount of working set used by the process (MB)

  - name: gc-heap-size
    measurement: runtime-counter/gc-heap-size
    description: Total heap size reported by the GC (MB)

- provider: Microsoft-AspNetCore-Server-Kestrel
  values: 
  - name: connections-per-second
    measurement: kestrel-counter/connections-per-second
    description: Connection Rate

results:
  # creates results from measurements
- name: runtime-counter/cpu-usage
  measurement: runtime-counter/cpu-usage
  description: Max CPU Usage (%)
  format: n0
  aggregate: max
  reduce: max
  
- name: runtime-counter/working-set
  measurement: runtime-counter/working-set
  description: Max Working Set (MB)
  format: n0
  aggregate: max
  reduce: max

- name: runtime-counter/working-set/p95
  measurement: runtime-counter/working-set
  description: p95 Working Set (MB)
  format: n0
  aggregate: percentile95
  reduce: max

- name: runtime-counter/gc-heap-size
  measurement: runtime-counter/gc-heap-size
  description: Max GC Heap Size (MB)
  format: n0
  aggregate: max
  reduce: max

defaultScripts:
  - |
    function max(values) {
      return Math.max(...values);
    }

    function min(values) {
      return Math.max(...values);
    }

    function last(values) {
      return values.length == 0 ? null : values[values.length-1];
    }

    function first(values) {
      return values.length == 0 ? null : values[0];
    }

    function all(values) {
      return values.length == 0 ? null : values[0];
    }

    function avg(values) {
      return values.reduce((acc, next) => acc + next) / values.length;
    }

    function sum(values) {
      return values.reduce((acc, next) => acc + next);
    }    

    function median(values) {
      return percentile(values, 50);
    }  

    function count(values) {
      return values.length;
    }      

    function count(values) {
      return values.length;
    }      

    function delta(values) {
      return max(values) - min(values);
    }      

    function percentile(values, th) {
      var ordered = values.sort((a, b) => a - b); // by default sort() uses ordinal comparison
      index = Math.max(0, Math.round(ordered.length * th / 100) - 1);
      return ordered[index];
    }

    var percentile99 = x => percentile(x, 99)
    var percentile95 = x => percentile(x, 95)
    var percentile90 = x => percentile(x, 90)
    var percentile75 = x => percentile(x, 90)
    var percentile50 = x => percentile(x, 90)
