// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using Microsoft.Crank.AzureDevOpsWorker;
using Xunit;
using System.Linq;

namespace Microsoft.Crank.IntegrationTests
{
    public class AzureWorkerTests
    {
        // To decode the payloads used in the unit tests:
        // Console.WriteLine(System.Text.Encoding.UTF8.GetString(Convert.FromHexString("...")));
        // To encode a json payload:
        // Console.WriteLine(Convert.ToHexString(System.Text.Encoding.UTF8.GetBytes(jsonString)));

        [Theory]
        [InlineData
        [InlineData
        [InlineData
        public void ShouldParsePublishTaskPayload(string hexPayload)
        {
            #region Examples
            /* 
            @strin3http://schemas.microsoft.com/2003/10/Serialization/�{{
                "name": "...",
                "condition": "...",
                "args": [ "..." ]
            }
            
            @string3http://schemas.microsoft.com/2003/10/Serialization/��{
                "name": "...",
                "condition": "...",
                "args": [ "..." ]
            }
            
            */
            #endregion


            var bytes = Convert.FromHexString(hexPayload);

            var payload = JobPayload.Deserialize(bytes);

            Assert.Single(payload.Args);
            Assert.Equal("--scenario single_query --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/platform.benchmarks.yml --property scenario=SingleQueryPlatformPgoInline --application.environmentVariables DOTNET_SYSTEM_NET_SOCKETS_INLINE_COMPLETIONS=1 --application.environmentVariables DOTNET_TieredPGO=1 --application.environmentVariables DOTNET_TC_QuickJitForLoops=1 --application.environmentVariables DOTNET_ReadyToRun=0 --application.channel edge --application.framework net8.0 --property framework=net8.0 --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/build/ci.profile.yml --profile intel-lin-app --profile intel-load-load --profile intel-db-db  --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/build/azure.profile.yml --variable duration=30 --no-metadata --no-measurements --session 20230216.1 --command-line-property --table BaselineBenchmarks --sql SQL_CONNECTION_STRING --chart", payload.Args[0]);
            Assert.Equal("crank", payload.Name);
            Assert.Equal("(true)", payload.Condition);
        }

        [Theory]
        [InlineData("")]
        [InlineData("68656C6C6F")] // hello
        [InlineData("7D")] // }
        [InlineData("7B20")] // { 
        [InlineData("7B207B")] // { {
        public void ShouldNotParsePublishTaskPayload(string hexPayload)
        {
            var bytes = Convert.FromHexString(hexPayload);

            Assert.Throws<Exception>(() => JobPayload.Deserialize(bytes));
        }

        [Theory]
        [InlineData("00:20:00", "0D0A7B0D0A2020226E616D65223A20226372616E6B222C0D0A202022636F6E646974696F6E223A2022287472756529222C0D0A20202274696D656F7574223A202230303A32303A3030222C0D0A20202261726773223A205B20222D2D7363656E6172696F2073696E676C655F717565727922205D0D0A7D0D0A")]
        public void ShouldParseTimeout(string timeSpan, string hexPayload)
        {
            var bytes = Convert.FromHexString(hexPayload);

            var payload = JobPayload.Deserialize(bytes);

            Assert.Equal(timeSpan, payload.Timeout.ToString());
        }

        [Theory]
        [InlineData("7b0a2020226e616d65223a20226372616e6b222c0a202022636f6e646974696f6e223a2022287472756529222c0a20202261726773223a205b20222d2d7363656e6172696f207822205d2c0a20202266696c6573223a207b0a20202020227363656e6172696f732f62656e63686d61726b732e796d6c223a20225a6d6c735a533078222c0a20202020227363656e6172696f732f6173736574732f7061796c6f61642e6a736f6e223a202265794a72496a6f6964694a39220a20207d0a7d",
        new[] { "scenarios/benchmarks.yml", "scenarios/assets/payload.json" },
        new[] { "file-1", "{\"k\":\"v\"}" },
        2)]
        public void ShouldParseFilesFromPayload(string hexPayload, IEnumerable<string> expectedRelativePaths, IEnumerable<string> expectedContents, int fileCount)
        {
            var bytes = Convert.FromHexString(hexPayload);
            var payload = JobPayload.Deserialize(bytes);

            Assert.NotNull(payload.Files);
            Assert.Equal(fileCount, payload.Files.Count);
            for (var i = 0; i < fileCount; i++)
            {
                Assert.True(payload.Files.ContainsKey(expectedRelativePaths.ElementAt(i)));
                Assert.Equal(expectedContents.ElementAt(i), Encoding.UTF8.GetString(Convert.FromBase64String(payload.Files[expectedRelativePaths.ElementAt(i)])));
            }
        }

        [Theory]
        // Case 1: Writes files and creates directories (reuses the payload used in ShouldParseFilesFromPayload)
        [InlineData(
            "7b0a2020226e616d65223a20226372616e6b222c0a202022636f6e646974696f6e223a2022287472756529222c0a20202261726773223a205b20222d2d7363656e6172696f207822205d2c0a20202266696c6573223a207b0a20202020227363656e6172696f732f62656e63686d61726b732e796d6c223a20225a6d6c735a533078222c0a20202020227363656e6172696f732f6173736574732f7061796c6f61642e6a736f6e223a202265794a72496a6f6964694a39220a20207d0a7d",
            new[] { "scenarios/benchmarks.yml", "scenarios/assets/payload.json" },
            new[] { "file-1", "{\"k\":\"v\"}" },
            new string[] { })]
        // Case 2: Skips unsafe traversal and invalid base64, but writes safe file
        [InlineData(
            "7b226e616d65223a226372616e6b222c22636f6e646974696f6e223a22287472756529222c2261726773223a5b222d2d7363656e6172696f2078225d2c2266696c6573223a7b222e2e2f6f7574736964652e747874223a22546b395152513d3d222c22696e76616c69642e62696e223a222a2a2a6e6f742d6261736536342d2a2a2a222c22736166652e747874223a225530464752513d3d227d7d",
            new[] { "safe.txt" },
            new[] { "SAFE" },
            new[] { "invalid.bin" })]
        // Case 3: Attempts unsafe traversal (after traversing one folder in) and writes nothing
        [InlineData(

            new string[] { },
            new string[] { },
            new[] { "../invalid.bin", "../outside.txt", "assets/../../outside2.txt" })]
        public void MaterializeFiles_FromPayload_WritesAndSkipsAsExpected(
            string hexPayload,
            IEnumerable<string> expectedExistingRelativePaths,
            IEnumerable<string> expectedExistingContents,
            IEnumerable<string> expectedNonExistingRelativePaths)
        {
            var bytes = Convert.FromHexString(hexPayload);
            var payload = JobPayload.Deserialize(bytes);

            var tmp = Path.Combine(Path.GetTempPath(), "crank-test-" + Guid.NewGuid().ToString("N"));
            Directory.CreateDirectory(tmp);

            var outsidePath = Path.GetFullPath(Path.Combine(tmp, "..", "outside.txt"));
            if (File.Exists(outsidePath)) File.Delete(outsidePath);

            try
            {
                Program.MaterializeFiles(payload, tmp);

                // Validate created files and contents
                var numFilesChecked = 0;
                Assert.Equal(expectedExistingRelativePaths.Count(), expectedExistingContents.Count());
                for (var i = 0; i < expectedExistingRelativePaths.Count(); i++)
                {
                    var rel = expectedExistingRelativePaths.ElementAt(i);
                    var expectedContent = expectedExistingContents.ElementAt(i);
                    var full = Path.Combine(new[] { tmp }.Concat(rel.Split('/', '\\')).ToArray());
                    Assert.True(File.Exists(full));
                    Assert.Equal(expectedContent, File.ReadAllText(full));
                    numFilesChecked++;
                }

                // Validate files that should not exist inside tmp
                foreach (var rel in expectedNonExistingRelativePaths ?? Array.Empty<string>())
                {
                    var full = Path.Combine(new[] { tmp }.Concat(rel.Split('/', '\\')).ToArray());
                    Assert.False(File.Exists(full));
                    numFilesChecked++;
                }
                // Validate that we checked the expected number of files
                Assert.Equal(expectedExistingRelativePaths.Count() + expectedNonExistingRelativePaths.Count(), numFilesChecked);

                // If the payload contains traversal attempts, ensure outside path wasn't created
                var hasTraversal = payload?.Files?.Keys?.Any(k => k.Contains("../") || k.Contains("..\\")) == true;
                if (hasTraversal)
                {
                    Assert.False(File.Exists(outsidePath));
                }
            }
            finally
            {
                TryDelete(tmp);
            }
        }

        private static void TryDelete(string dir)
        {
            try
            {
                if (!string.IsNullOrEmpty(dir) && Directory.Exists(dir))
                {
                    Directory.Delete(dir, true);
                }
            }
            catch
            {
                // best effort cleanup
            }
        }
    }
}
